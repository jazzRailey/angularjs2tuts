
/*
    Angular Interpolation

    Data-binding        Description
    One Way             From Component to View Template
    One Way             From View Template to Component
    Two Way             From Component to View Template & From View template to Component

    Examples :
    <h1>{{firstName}}</h1>
    <h1>{{'Name = '  + firstName}}</h1>
    <h1>{{10 + 20 + 30}}</h1>
    <h1>{{ristname ? firstName : 'No name specified'}}</h1>
    <img src = {{imagePath}} // imagePath is the variable you declared in the class section
    <h1>{{'Full Name = ' + getFullName()}}</h1>

    // inside the class
    firstName : string = 'Tom';
    lastName : string = 'Hopkins';

    getFullName() : string {
        return this.firstName + ' ' + this.lastName;
    }

    Property Binding in Angular2

    interpolation                               Property Binding
    <img src='{{imagePath}}' />                 <img [src]='imagePath' />

    Interpolation v/s Property binding
    - Interpolation is a special syntax that Angular coverts into property binding
    - To concatenate strings we must use interpolation instead of property binding
        Ex : <img src='http://www.pragimtech.com/{{imagePath}}'>

    - To set an element property to a non-string data value, you must use property binding
        <button [disabled] = 'isDisabled'>Click Me </button>

    Property Binding
    - Remember to enclose the property name iwth a pair of square brackets
    - Canonical form <button bind-disabled='isDisabled'> Click Me</button>
    - Angular data binding sanitizes malicious content before displaying it.



    HTML Attribute vs DOM Property
    -Attributes are defined by HTML, where as properties are defined by the DOM
    - Attributes initialize DOM properties. Once the initialization complete, the attributes job is done
    - Property values can change, where as attribute value can't

    - Important points
        HTML atrributes and the DOM properties are different thisgs
        Angular binding works with properties and events, and not attributes


    Lesson 11
    What is Attribute Binding?
    - Interpolation and Property binding deal with binding Component class properties to HTML element properties and NOT ATTRIBUTES
    - But not all HTML element attributes have corresponding properties. For example, colspan attribute does not have a corresponding property.
    - In situations like this we want to be able to bind to HTML element attributes
    - Hence, Angular provided Attribute binding

    Attribute Binding Examples
        <th [attr.colspan] = "columnSpan">
        <th attr.colspan = "{{columnSpan}}">

    Lesson 12
    Class Binding in Angular2

    Replace all the existing CSS classes with one or more classes
        [class] = 'classToApply'

    Add or remove a single CSS class
        [class.boldClass] = 'applyBoldClass'

    Add or remove multiple CSS classes (use a method)
        [ngClass] = 'addClasses()'

            example code
            export class AppComponent{
                applyBoldClass : boolean = true;
                applyItalicsClass : boolean = true;

                addClasses(){
                    let classes = {
                        boldClass : this.applyBoldClass,
                        italicsClass : this.applyItalicsClass
                    };
                }

                return classes;
            }


        Lesson 13
        Style Binding in Angular2

        @Component({
            selector : 'my-app',
            template : `<button syle='color:red' [ngStyle]= "addStyles()" > My Button </button>`
        })

        export class AppComponent{
            isBold : boolean = true;
            fontSize : number = 30;
            isItalic: boolean = true;

            addStyles(){
                let styles{
                    'font-weight' : this.isBold ? 'bold' : 'normal',
                    'font-style' : this.isItalic ? 'italic' : 'normal',
                    'font-size.px' : this.fontSize
                };

                return styles;
                }
        
        }


        Lesson 14

        always remember [] is for property binding
                        () is for event binding


		toggleDetails(): void {
			this.showDetails = !this.showDetails;
		}

		// tasks is by default it will hide the Gender and Age row then when you clicked the the button it will show those rows.

		templateurl file

		use *ngIf for conditional purposes

		 <tr *ngIf='showDetails'>
            <td>Gender</td>
            <td>{{gender}}</td>
        </tr>
        <tr *ngIf='showDetails'>
            <td>Age</td>
            <td>{{age}}</td>
        </tr>


		<button (click)="toggleDetails()">
			{{showDetails ? 'Hide' : 'Show'}}  Details
		</button>


		Lesson 15 Two Way Data Bindings

		To make it work, you need to import the FormsModule in app.module.ts

		import { FormsModule } from '@angular/forms';

		after you have add it you need to add the FormsModule in the 

		@NgModule({
		imports:      [ BrowserModule, FormsModule ],

		Then use the ngModel directive

			<input [(ngModel)]='name' /> <br/>
			You Entered {{name}}
		
		*name variable is declared in the export class EmployeeComponent (based on my example)
        
*/